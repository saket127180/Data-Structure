Sort an array A using Merge Sort.
Change in the input array itself. So no need to return or print anything.
Input format :
Line 1 : Integer n i.e. Array size
Line 2 : Array elements (separated by space)
Output format :
Array elements in increasing order (separated by space)
Constraints :
1 <= n <= 10^3
Sample Input 1 :
6 
2 6 8 5 4 3
Sample Output 1 :
2 3 4 5 6 8
Sample Input 2 :
5
2 1 5 2 3
Sample Output 2 :
1 2 2 3 5 


void Merge(int input[] , int start ,int mid , int end)
{
    int c[1000] ;
    int i = start  , j = mid + 1 ,k = start;
    while(i <= mid && j <= end)
    {
        if(input[i] <= input[j])
            c[k++] = input[i++] ;
        else if(input[i] > input[j])
            c[k++] = input[j++] ;
        
    }
    for(; i <= mid ; i++)
         c[k++] = input[i] ;
    for(; j <= end ; j++)
         c[k++] = input[j] ;
    for(int i = start ; i <= end  ; i++)
        input[i] = c[i] ;
}

void helper(int input[] , int start , int end  )
{
    if(start >= end)
        return ;
    int mid = (start + end) / 2 ;
     helper(input , start , mid) ;
     helper(input , mid + 1 , end) ;
    Merge(input , start , mid , end) ;
    
}



void mergeSort(int input[], int size){
    helper(input , 0 , size - 1) ;
        
}
