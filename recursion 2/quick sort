Sort an array A using Quick Sort.
Change in the input array itself. So no need to return or print anything.


Input format :
Line 1 : Integer n i.e. Array size
Line 2 : Array elements (separated by space)
Output format :
Array elements in increasing order (separated by space)
Constraints :
1 <= n <= 10^3
Sample Input 1 :
6 
2 6 8 5 4 3
Sample Output 1 :
2 3 4 5 6 8
Sample Input 2 :
5
1 5 2 7 3
Sample Output 2 :
1 2 3 5 7 


void helperfunction(int a[], int si, int ei)
{     if(si>=ei){
        return;}
 
int c=0;
 for(int i=si+1;i<=ei;i++)
 {
     if(a[i]<a[si])
     {
         c++;
     }
 }
 int z=si+c;
 int temp=a[z];
 a[z]=a[si];
 a[si]=temp;
 
 int i=si;
 int j=ei;
 while(i<z && j>z)
 {
     if(a[i]<a[z])
     {
         i++;
         continue;
     }
     else if(a[j]>=a[z])
     {
         j--;
         continue;
     }
     else
     {
         int x=a[i];
         a[i]=a[j];
         a[j]=x;
     }
 }
 
 helperfunction(a,si,z-1);
 helperfunction(a,z+1,ei);
 
}
void quickSort(int input[], int size) {
  /* Don't write main().
     Don't read input, it is passed as function argument.
     Change in the given array itself.
     Taking input and printing output is handled automatically.
  */
    if(size==0 || size==1)
    {
        return;
    }
    helperfunction(input,0,size-1);

}
